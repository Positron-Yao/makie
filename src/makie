#!/bin/bash

. ${HOME}/.daily/phrases

rm $HOME/.daily/*.daily 2> /dev/null

if [[ $# -eq 0 ]]; then
    # 无命令行参数时:
    api_key="3762d7ab3be74be9bb530507251506"
    city="wuhan"
    diary="$DNDIARY/diary/"
    today=`date -Idate`
    hour=$(date +%H)
    if [[ -f "${HOME}/.daily/${today}.daily" ]]; then
        echo -e ${make_clean[$((RANDOM % ${#make_clean[@]}))]}
    else
        rm *.daily 2>/dev/null
        touch "${HOME}/.daily/${today}.daily"
        # echo "Today's daily file created successfully."
        # 获取天气
        # curl "http://api.weatherapi.com/v1/current.json?key=${api_key}&q=${city}&aqi=no&lang=zh"
        weather=`curl -s http://api.weatherapi.com/v1/current.json?key\=${api_key}\&q\=${city}\&aqi\=no\&lang\=zh | jq -r .current.condition.text`
        # 获取时间段
        echo $hour
        if (( hour >= 6 && hour < 12 )); then
            time_section="morning"
            case "${weather}" in
                *晴*) phrases=(${phrases0[@]}) ;;
                *云*) phrases=(${phrases3[@]}) ;;
                *阴*) phrases=(${phrases6[@]}) ;;
                *雨*) phrases=(${phrases9[@]}) ;;
                *雪*) phrases=(${phrases12[@]}) ;;
                *) phrases=(${phrases_[@]}) ;;
            esac
        elif (( hour >= 12 && hour < 19 )); then
            time_section="noon"
            case "${weather}" in
                *晴*) phrases=(${phrases1[@]}) ;;
                *云*) phrases=(${phrases4[@]}) ;;
                *阴*) phrases=(${phrases7[@]}) ;;
                *雨*) phrases=(${phrases10[@]}) ;;
                *雪*) phrases=(${phrases13[@]}) ;;
                *) phrases=(${phrases_[@]}) ;;
            esac
        elif (( hour >= 19 || hour < 6 )); then
            time_section="night"
            case "${weather}" in
                *晴*) phrases=(${phrases2[@]}) ;;
                *云*) phrases=(${phrases5[@]}) ;;
                *阴*) phrases=(${phrases8[@]}) ;;
                *雨*) phrases=(${phrases11[@]}) ;;
                *雪*) phrases=(${phrases14[@]}) ;;
                *) phrases=(${phrases_[@]}) ;;
            esac
        fi
        # 解析输出
        printf "今天是 $(date '+%Y年%m月%d日 星期')"
        case "$(date +%u)" in
            1) echo "一..." ;;
            2) echo "二" ;;
            3) echo "三" ;;
            4) echo "四" ;;
            5) echo "五" ;;
            6) echo "六!" ;;
            7) echo "日~" ;;
        esac
        printf "今日天气: ${weather}"
        case "${weather}" in
            *晴*) 
                if [[ $time_section = "night" ]]; then 
                    echo "🌙 "
                else
                    echo "☀️" 
                fi
                ;;
            *云*) echo "⛅" ;;
            *阴*) echo "☁️" ;;
            *雨*) echo "🌧" ;;
            *雪*) echo "🌨" ;;
            *) echo "" ;;
        esac

        idx=$((RANDOM % ${#phrases[@]}))
        echo "${phrases[idx]}"
        if (( RANDOM % 2 == 0 )); then
            # 周末问候
            if [[ $(date +%u) -gt 5 ]]; then
                echo "${weekend[$((RANDOM % ${#weekend[@]}))]}"
            elif [[ $(date +%u) -eq 1 ]]; then
                echo "${monday[$((RANDOM % ${#weekdays[@]}))]}"
            elif [[ $(date +%u) -eq 5 ]]; then
                echo "${friday[$((RANDOM % ${#weekdays[@]}))]}"
            else
                echo "${weekdays[$((RANDOM % ${#weekdays[@]}))]}"
            fi
        else
            # 纯随机问候
            echo "${roasts[$((RANDOM % ${#roasts[@]}))]}"
        fi
        # 检查todo.md的内容
        todo_count=`cat $HOME/todo.md | grep "\[TODO\]" | wc -l`
        alert_count=`cat $HOME/todo.md | grep "\[ALRT\]" | wc -l`
        # wait_count=`cat $HOME/todo.md | grep "\[WAIT\]" | wc -l`
        # 输出todo问候
        if [[ $todo_count -gt 0 ]]; then
            printf "${p_todo[$((RANDOM % ${#p_todo[@]}))]}\n" $todo_count
        fi
        if [[ $alert_count -gt 0 ]]; then
            printf "${p_alert[$((RANDOM % ${#p_alert[@]}))]}\n" $alert_count
            cat $HOME/todo.md | grep "\[ALRT\]" | glow
        fi
        # if [[ $wait_count -gt 0 ]]; then
        #     printf "${p_wait[$((RANDOM % ${#p_wait[@]}))]}\n" $wait_count
        # fi
    fi
    # 检查是否写了日记
    if [[ ! -f "${diary}$(date '+%Y-%m-%d').md" ]]; then
        echo -e ${dn[$((RANDOM % ${#dn[@]}))]}
    fi
else
    # 有命令行参数的情况下
    case $1 in
        "clean") 
            # clean 模式
            ls_res=`ls $HOME/.daily/*.daily 2>/dev/null`
            if [ ! ${#ls_res} -eq 0 ]; then
                rm $HOME/.daily/*.daily 2>/dev/null
                echo "${cleaned[$((RANDOM % ${#cleaned[@]}))]}"
            else
                echo "${nothing_to_clean[$((RANDOM % ${#nothing_to_clean[@]}))]}"
            fi
            ;;
        *)
            echo "${nani[$((RANDOM % ${#nani[@]}))]}"
            ;;
    esac
fi

